package main

fun hello

fun main() {
    a := 1
    var b int = 344
    var c string = "asdasd"
    var g int = 9
    const o := 4.5
    public var (
        k int
        i bool
        j float
    )
    type foo struct {
        f int
        t string
    }

    type Atype<type T> struct {
        v T
    }

    fun gen<type T> hh<T> {
        l := hh<T>{v: &T{}}

    }

    oper (f *matrix) rmul(tar int) matrix {
        m := f.clone()
        for i := 0; i < f.rows; i++ {
            for j := 0; j < f.cols; j++ {
                m.data[i][j] *= tar
            }
        }
        return m
    }

    oper (f *matrix) mul(tar int) matrix {
        m := f.clone()
        for i := 0; i < f.rows; i++ {
            for j := 0; j < f.cols; j++ {
                m.data[i][j] *= tar
            }
        }
        return m
    }

    oper (f *matrix) muleq(tar matrix) {
        m := f.clone()
        for i := 0; i < f.rows; i++ {
            for j := 0; j < f.cols; j++ {
                m.data[i][j] *= tar.data[i][j]
            }
        }
        f = m
    }

    oper (f foo) plus(tar foo) foo {
        r := &foo{}
        r.gg = f.gg + tar.gg
        return *r
    }

    oper (f foo) pluseq(tar foo) foo {
        r := &foo{}
        r.gg = f.gg + tar.gg
        return *r
    }
    m := foo{gg:2} + foo{gg:5} // m: {gg: 7}

    
}